stages:
  - build
  - test
  - stage
  - deploy

cache:
  paths:
  - vendor/

# Compila o projeto e baixa dependências
job-composer:
  stage: build
  services:
    - docker:dind
  image: docker:latest
  script:
    - docker run --rm -v $PWD:/app composer:1.4 update

# Testa conexão com banco e realiza o migrate
job-test-db-migrate:
  stage: test
  image: php:7.1.7-apache
  services: 
    - postgres:latest
  variables:
    POSTGRES_USER: postgres
    POSTGRES_PASSWORD: secret
    POSTGRES_DB: ifcitec
  script:
    - apt-get update -yqq
    - apt-get install -y libpq-dev 
    - docker-php-ext-configure pgsql -with-pgsql=/usr/local/pgsql
    - docker-php-ext-install pdo pdo_pgsql pgsql
    - cp .env.example .env
    - php artisan key:generate
    - php artisan env
    - php artisan --env=local migrate
    - php artisan db:seed

# Cria um container para produção, disponível no menu Registry
job-make-container:
  stage: stage
  image: docker:latest
  services:
    - docker:dind
  script:
    - export IMAGE_TAG=$(echo -en $CI_COMMIT_REF_NAME | tr -c '[:alnum:]_.-' '-')
    - docker login -u "gitlab-ci-token" -p "$CI_JOB_TOKEN" $CI_REGISTRY
    - docker build --pull -t "$CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG" -f ./Dockerfile-prod .
    - docker push "$CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG"

# Sobe a aplicação no servidor
job-deploy-on-server:
  stage: deploy
  #image: docker:latest
  script:
    - echo 1
